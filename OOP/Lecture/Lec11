overloading: 함수의 이름은 같지만 매개변수의 개수나 타입이 다른 함수를 여러 개 정의하는 것
overriding: 상속받은 클래스에서 부모 클래스의 함수를 재정의하는 것

예시: virtual void print() const {cout << "Student" << endl;}
    virtual : 가상 함수로 선언하면, 포인터의 타입에 따라 호출되는 함수가 달라진다.
    virtual 함수는 상속받은 클래스에서 overriding이 가능하다.


상속: 부모 클래스의 멤버 변수와 함수를 자식 클래스에서 사용할 수 있게 하는 것

private : 클래스 내부에서만 접근 가능
protected : 클래스 내부 + 상속받은 클래스에서 접근 가능
public : 모든 곳에서 접근 가능 -> 인터페이스

객체의 속성은 접근제어자를 private으로 설정 -> 접근 불가능
디폴트는 private

메소드는 public으로 설정 -> 접근 가능

객체는 메모리에 저장되는데, 객체의 크기는 객체 내부의 변수의 크기의 합이다.


this 포인터: 객체 자기 자신을 가리키는 상수 포인터 (상수 포인터이므로 변경 불가능)
묵시적으로 사용됨 = 작성하지 않아도 사용 가능

this.변수명 = (*this).변수명
this->변수명 = (*this).변수명

Manager function : 객체를 생성하고 소멸시키는 역할
mutator function : 객체의 내부 변수를 변경하는 함수

accessor function : 객체의 내부 변수를 반환하는 함수 
    accessor function은 const로 선언하는 것이 좋다. -> 값의 변경이 목적이 아니기 때문에
    예시: int getAge() const {return age;}
    const : 함수 내부에서 멤버 변수를 변경하지 않겠다는 의미
    const 함수는 const 객체에서만 호출 가능하다.

default constructor : 매개변수가 없는 생성자
    예시: Student() {name = ""; age = 0;}
    생성자를 정의하지 않으면 컴파일러가 자동으로 생성해준다.
값을 매개변수로 미리 설정해두면, 객체를 생성할 때 값을 설정하지 않아도 된다.
해당 값이 들어오지 않으면, default 값으로 설정된다.
들어오면 들어온 값으로 설정된다.

copy constructor: 객체를 복사하는 생성자
    예시: Student(const Student& s) {name = s.name; age = s.age;}
    매개변수를 &로 받는 이유:
    객체를 전달하때는 객체의 주소를 전달하는 것이 일반적이다. 
    이유로는 -> 만약 복사로 진행되면 매우 큰 오버해드가 발생한다. 
                하지만 객체의 주소를 복사하면 메모리를 절약할 수 있다.
    &로 받는 것은 c++이 완벽한 객체지향 언어가 아니라는 것을 보여준다.

bitwise copy and logical copy
bitwise copy: copy하는 객체와 같은 메모리를 가리킴
logical copy: copy하는 객체와 다른 메모리를 가리킴

local variable로 객체를 생성하고 반환할 때는 복사 생성자가 호출된다. 
    예시: Student getStudent() {Student s; return s;}
    Student s; -> default constructor 호출
    return s; -> 복사 생성자 호출

annonymous object: 이름이 없는 객체
    예시:   Student("Kim", 20); -> annonymous object
            Student s("Kim", 20); -> named object


소멸자는 객체가 소멸될 때 호출된다.
무조건 하나만 존재해야 한다.
소멸자는 매개변수를 가질 수 없다.
