-------------------------------------------------------------------------------------------------------
--------------------------------------------Lecture 01-------------------------------------------------
-------------------------------------------------------------------------------------------------------

2 page: 언어의 발전이 어떻게 되었는지 -> 꼭 알아두기

기계어 : 컴퓨터의 cpu만 이해할 수 잇는 단어.

심볼릭 언어: 
    심볼: 기계어 명령어를 표현하기 위한 단위
    어쎔블리 언어: 심볼릭 코드를 기계어로 변환한 형태의 언어

고수준 언어:
    기계어보다 훨씬 인간의 언어에 가까운 언어.

---------------------------------------------------------------------------------------------------------
3 page: 하드웨어가 알아들을 수 있는 언어가 사람이 알아들을 수 있게 추상화

---------------------------------------------------------------------------------------------------------
8 page: c++ 파일을 컴파일러에 넣으면 obj라는 파일이 생성이 된다.
        소스코드(원시코드) -> 출력된 문서 목적 코드
        주로 hige-level -> low level
        -> .obj 파일은 .cpp 파일의 수만큼 생성됨.

        전처리기 : 컴파일 전테 코드를 적정한 상태로 준비하거나 처리
                # 으로 시작하는 구문
        
        컴파일 : 컴파일러가 고수준의 언어를 저수준으로 나타내는 일
                소스 프로그램을 목적 프로그램으로 변환
                c를 어쎔블리 언어로 변환하는 과정
        
        어쎔블 : 아쎔블러가 어쎔블리어를 기계어로 변환

        링크 : 여러 오브젝트 파일을 하나로 합치거나 라이브러리와 합치는 일


        컴파일러는 2가지로 구성이된다.
            1. preprocessor(전처리기)가 먼저 작동함.
                번역작업전에 뭘 전에 처리할까? 
                -> #은 전처리 연산자 : # 먼저 처리해야한다.
                ex) #include <iostream> 
                    cout << 은 iostream에 구현이 되어 있음.
            2. translator는 이후에 작동함.

        linker:
            필요한 파일과 소스들을 묶어서 연결함.
            번역작업 이후에 여러가지 obj파일들을 하나로 묶음.

ERROR의 종류:
    1. syntax 에러  : 문법에 규칙에 맞지 않게 작성
    2. linking 에러 : cpp파일안에서는 에러가 없지만 linking하는 과정에서 에러가 발생
                        ex) 정의부와 선언부가 다른 에러 -> 찾지 못함.
    3. runtime 에러 : 코드상 링킹상 에러가 전혀 에러가 없음
                        로직 자체의 에러가 존재해. 에러가 발생함.
                        하나하나 확인하면서 디버깅해야 해결됨.
                        설계의 오류

---------------------------------------------------------------------------------------------------------
9 page:
프로그램: 컴파일되어서 실행가능한 바이너리 파일
프로세스: 메모리 위에 올라가고 실행하는데 전혀 무리가 없는 상태가 됨.
            실행 중인 상태를 의미함.
운영체제: 프로세스가 돌아가기 위한 환경

---------------------------------------------------------------------------------------------------------
10 page: (매우 중요함)
3개의 과정이 매우 중요함.

1. system Requirements
2. Analysis
3. Design
4. Code
5. System Test
6. Maintaince
---------------------------------------------------------------------------------------------------------
12page는 넘어가셈
---------------------------------------------------------------------------------------------------------
13~14page:
블랙박스 테스트 vs 화이트 박스 테스트

명세 오류:
    프로그램 설계시 발생하는 오류
    블랙박스 테스트만으로 찾을 수 있음

코드 오류:
    문법상 오류

로직 오류:
    화이트박스 테스트만으로 찾을 수 있음


---------------------------------------------------------------------------------------------------------
16page:
namespace -> class의 이름을 가져옴
위상의 개념으로 쪼개 놓은 것이다.

class를 

---------------------------------------------------------------------------------------------------------
18page:

namespace : 
- 특정 영역에 이름을 붙여주기 위한 문법적 요소
- namespace가 다르면 같은 이름의 선언이 허용된다.
- 여러 외부 라이브러리 사용 중 발생하는 문제를 해결하기 위해 만들어진다.


using :
- namespace에 선언된 모든 것에 대해 namespace 지정 생략을 명령한다.
- 편리함은 증가하지만 무분별하게 사용하면 충돌이 발생할 확률이 상대적으로 높아진다.



---------------------------------------------------------------------------------------------------------
19page:

main은 복잡하지 않은 것이 좋음
main은 시작에 있어서 선언되는 시작 지점
C start-up routine이 먼저 실행해서 거기서 main을 부름
stack 맨 꼭데기에 main함수를 실행하기 위한 설정을 맨위에 올림

---------------------------------------------------------------------------------------------------------
22page:

변수: 프로그램이 동작하는 과정에서 임의의 값이 들어갈 수 있는 "메모리 공간" 자체
하나의 로컬내에서는 동일한 이름 불가능

32bit CPU에서 int의 사이즈는 4byte
64bit CPU에서 int의 사이즈는 8byte

float는 정수부가 큼
double은 실수부가 큼

---------------------------------------------------------------------------------------------------------
23~34page:

식별자 이름 선정 규칙:
    1. 가능한 문자: A-z, 0-9, _
    2. 숫자로 시작 불가능
    3. 미리 예약된 이름을 식별자로 사용불가능 (if, case, while, etc)
    4. 짧으면서 직관적인 식별자의 이릠이 좋음
    5. C++은 대소문자 구분이 가능

자료형에 대한 이야기


상수중에 단일 문자상수는 외따옴표
상수중에 문자열 상수는 쌍따옴표

상수는 function call이 발생해야 결정되는 값


---------------------------------------------------------------------------------------------------------
37 page:

int x = 42;
cout.width(5); // 길이가 5칸이므로 공백 3칸에 숫자 2칸
cout << x << '\n'; // Outputs    42
cout << x << '\n'; // Outputs 42 -> 위에 한 번만 적용됨.


int x = 42;
cout << setw(5) << x << '\n'; // Outputs 42 // 함수를 통해서 적용함.
cout << x << '\n'; // Outputs 42


fill(char) 함수는 지정된 범위의 공백을 지정한 문자로 채울 수 있는 기능을 제공
지정된 문자는 재지정을 하기 전까지 계속 적용됨

setfill(char)는 cout 스트림에 입력 파라미터값으로 넣어 fill() 함수와 같은 기능을
수행
37
int x = 42;
cout.width(5);
cout.fill('*'); 빈 공간에 *를 집어 넣음
cout << x << '\n'; // Outputs ***42
int x = 42;
cout << setw(5) << setfill('*') << x << '\n'; // Outputs ***42


진수 표현
int x = 42;
cout << oct << x << '\n'; // Outputs 52
cout << dec << x << '\n'; // Outputs 42
cout << hex << x << '\n'; // Outputs 2A


-------------------------------------------------------------------------------------------------------
--------------------------------------------Lecture 02-------------------------------------------------
-------------------------------------------------------------------------------------------------------

operand     : 피연산자
operator    : 연산자


수식 : 피연산자와 연산자로 이루어진 순서이며 연산결과는 단일 값을 가짐
- 기본 수식: 식별자, 상수,표현
- 삽입 수식: 결과 / 삽입연산자 / 값


연산자 순위 -b++ -> -(b++)



And : &&
Or  : ||
Not : !



전위 연산자

prefix
int operator++(){
    this->value+=1
    return this->vlaue;
}

postfix
// 매개변수 int는 구분하기 위한 자료형일 뿐, 실제로 어떤 값을 가지고와 연산을 진행하는 것이 아님 
int operator++(int ){  
    int tmp = this.value;
    this->value += 1
    return tmp 
}


좌측 연관성과 우측 연관성을 알아야함
좌측연관성은 계산
우측연관성은 할당


복합문 {} <- 다수의 문들의 모임

-------------------------------------------------------------------------------------------------------
--------------------------------------------Lecture 03-------------------------------------------------
-------------------------------------------------------------------------------------------------------

