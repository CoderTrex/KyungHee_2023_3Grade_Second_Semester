다형성(Polymorphism)은 객체지향 프로그래밍의 중요한 특성 중 하나로, 동일한 인터페이스를 통해 여러 가지 형태의 객체를 다룰 수 있는 능력을 나타냅니다. 
다형성은 코드의 재사용성을 높이고 유연성을 제공하여 소프트웨어의 확장성을 향상시킵니다. 주로 두 가지 유형의 다형성이 있습니다.

컴파일 타임 다형성 (Compile-time Polymorphism):

컴파일 타임 다형성은 오버로딩(Overloading)을 통해 이루어집니다.
같은 이름의 함수 또는 연산자가 여러 번 정의되어 다양한 매개변수 형식이나 개수를 처리할 수 있도록 합니다.
컴파일러는 함수 호출 시에 적절한 버전을 선택하여 컴파일 시점에 해결합니다.
cpp
Copy code
int add(int a, int b) {
    return a + b;
}

double add(double a, double b) {
    return a + b;
}
런타임 다형성 (Runtime Polymorphism):

런타임 다형성은 오버라이딩(Overriding) 및 가상 함수를 통해 이루어집니다.
상위 클래스에서 정의된 가상 함수를 하위 클래스에서 재정의하여 동일한 인터페이스를 유지하면서 다양한 동작을 수행할 수 있도록 합니다.
동적 바인딩을 통해 객체의 실제 타입에 따라 실행 시점에 적절한 함수가 호출됩니다.
cpp
Copy code
class Shape {
public:
    virtual void draw() {
        // 기본 도형 그리기
    }
};

class Circle : public Shape {
public:
    void draw() override {
        // 원 그리기
    }
};

class Square : public Shape {
public:
    void draw() override {
        // 정사각형 그리기
    }
};
다형성을 사용하면 동일한 인터페이스를 갖는 객체들을 일관된 방식으로 다룰 수 있으므로 코드의 가독성이 향상되고, 유지 보수가 쉬워집니다. 
객체지향 설계 원칙 중 하나인 "프로그램을 인터페이스에 맞춰서, 구현에 맞추지 말라"를 구현하는 데에 기여합니다.

가상함수는 오버라이딩을 강제하지 않음, 하지만 순수 가상함수는 오버라이딩을 강제함.

추상화 클래스는 최소 하나의 순수 가상 함수를 포함해야 한다.