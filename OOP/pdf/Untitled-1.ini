inline 함수는 함수의 선언과 정의를 같이 하거나또는 명시적으로 inline 키워드를 붙여서 선언하는 함수이다.
장점은 간단하며 한눈에 알아볼 수 있다는 점이다.
단점으로는 자주 많이 호출할 시 binary의 크기가 커지고 재귀함수를 사용할 수 없다는 점이 단점이다.



다형성이란: 같은 이름을 통해서 다른 기능을 구현하는 것을 의미한다.
동음이의와 비슷한 개념이라고 보면 좋다.
다형성은 오버로딩과 오버라이딩으로 구현된다.

오버로딩이란?
두개 이상의 함수나 연산자를 같은 식별자와 양식으로 재정의하는 행위이다.
함수와 오버로딩은 같은 이름을 가지고 있지만,
매개변수의 개수나 자료형의 차이에 의해 구분되어 다르게 동작한다.

오버로딩의 조건은 다음과 같다.
1. 함수 이름이 같아야한다.
2. 매개변수의 개수 또는 자료형이 달라야한다.
3. 반환형은 오버로딩을 구현하는데 아무런 영향을 주지 않는다.

오버라이딩이란?
상위 클래스의 메소드를 하위 클래스(상속 받은 클래스)에서 재사용하는 것이다.

구분:       오버로딩	                오버라이딩
문 법:      함수 문법	                클래스 문법
함수 명:    같아야 재정의	            부모의 것과 같아야 한다.
인자 타입:  달라야 재정의	            부모의 것과 같아야 한다.
인자 개수:  달라야 재정의	            부모의 것과 같아야 한다.
반환 타입	재정의와 아무 연관 없다.	 부모의 것과 같아야 한다.
목 적:	                함수 재정의와 다형성 


바인딩이란? : 묶는다는 뜻으로 구성요소들이 확정이되어서 더 이상 값을 변경할 수 없는 상태를 이르는 말을 바인딩이라고 한다.
바인딩은 동적 바인딩과 정적 바인딩으로 구성된다.


정적 바인딩은 컴파일 타임에 결정되는 바인딩으로 상대적으로 빠르며, 컴파일 이후에는 변경이 불가능하다는 성질이 있다.
동적 바인딩은 런타임에 결정되는 바인딩으로 상대적으로 느리지만, 컴파일 이후에 런타임에 상황에 맞춰 변경이 가능해 이식성이 높다.


가상함수는 오버라이딩을 할 수 있게 해주는 함수로 virtual 키워드를 사용하여 선언한다.
이외의 순수가상함수가 존재하는데 이는 = 0을 가상함수 뒤에 붙여서 사용하는 함수이다.
해당 순수가상함수를 상속받는 클래스는 반드시 해당 함수를 오버라이딩을 해야 한다.

upcasting와 downcasting은 상속 관계에 있는 class끼리의 형변환을 의미한다.
upcasting은 자식클래스를 부모클래스로 캐스팅하는 것으로 static_cast<부모클래스>(자식클래스)를 통해서 형변환이 가능하다.

downcasting은 부모클래스를 자식클래스로 캐스팅하는 것으로 dynamic_cast<자식클래스>(부모클래스)만을 통해서 형변환이 가능하다.
명시적으로는 c++이 downcasting을 허용하지 않는다. 하지만 컴파일에서 확인하지 않는 dynamic_cast를 통해서는 가능하다.
